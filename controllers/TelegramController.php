<?php

namespace app\controllers;

use app\models\BotMessage;
use app\models\FbHelper;
use app\models\UserProfile;
use pimax\FbBotApp;
use pimax\Messages\Message;
use pimax\Messages\QuickReply;
use pimax\Messages\QuickReplyButton;
use pimax\Messages\SenderAction;
use Yii;
use yii\filters\AccessControl;
use yii\httpclient\Client;
use yii\web\Controller;


class TelegramController extends Controller
{
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                //'only' => ['logout'],
                'rules' => [
                    [
                        'allow' => true,
                        //'actions' => ['login', 'signup'],
                        //'roles' => ['?'],
                    ],
                    [
                        'allow' => true,
                        //'actions' => ['login','signup','logout','about','index','contact' ],
                        //'roles' => ['?'],
                    ],
                ],

            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function beforeAction($action)
    {

        // To bypass from FB bot
        $this->enableCsrfValidation = false;

        // To get original post data from FB bot
        //$this->post_orig_data = Yii::$app->request->getRawBody();

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * Displays homepage.
     *
     * @return string
     */
    public function actionIndex()
    {
        echo 'Test is ok';
    }

    public function actionTest() {


    }

    public function actionBot() {

        $data = json_decode(Yii::$app->request->getRawBody(), true);

        // logging
        $fp = fopen('/var/www/btc-bot/telegram_messages.log', 'a');
        fwrite($fp, serialize($data) . "--" . "\n");

        echo 'status: OK';

    }
    public static function parseMessage($msg = false) {
/*
        $msg = "";

        if (!empty($message['message'])) {
            $msg = $message['message']['text'];
        } else if (!empty($message['postback'])) {
            $msg = $message['postback']['payload'];
        }
*/
        $model = new BotMessage();
        $model->message         = $msg['message']['text'];
        $model->sender_id       = $msg['sender']['id'];
        $model->original_msg    = json_encode($msg);

        return $model;

    }

    public static function sendMessage($user_id, $msg) {


    }

    public static function createUserProfile($user_id) {

        $client = new Client();
        $response = $client->createRequest()
            ->setMethod('GET')
            ->setUrl('https://graph.facebook.com/v2.6/'.$user_id.'?fields=first_name,last_name,profile_pic,locale,timezone,gender,is_payment_enabled,last_ad_referral&access_token='.Yii::$app->params['fb_page_token'])
            ->send();
        if ($response->isOk) {

            $userProfileModel = new UserProfile();

            $userProfileModel->external_id      = $response->data['id'];
            $userProfileModel->firstname        = $response->data['first_name'];
            $userProfileModel->lastname         = $response->data['last_name'];
            $userProfileModel->pic              = $response->data['profile_pic'];
            $userProfileModel->locale           = $response->data['locale'];
            $userProfileModel->timezone         = $response->data['timezone'];
            $userProfileModel->gender           = $response->data['gender'];
            $userProfileModel->params           = array(
                array('is_payment_enabled' => $response->data['is_payment_enabled']),
            );

            $userProfileModel->saveProfile();

            return $userProfileModel;

        }

    }


}
