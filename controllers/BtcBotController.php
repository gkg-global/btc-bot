<?php

namespace app\controllers;

use Yii;
use yii\filters\AccessControl;
use yii\web\Controller;
use yii\httpclient\Client;
use yii\web\Response;
use yii\filters\VerbFilter;
use app\models\LoginForm;
use app\models\ContactForm;

class BtcBotController extends Controller
{
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                //'only' => ['logout'],
                'rules' => [
                    [
                        'allow' => true,
                        //'actions' => ['login', 'signup'],
                        //'roles' => ['?'],
                    ],
                    [
                        'allow' => true,
                        //'actions' => ['login','signup','logout','about','index','contact' ],
                        //'roles' => ['?'],
                    ],
                ],

            ],
        ];
    }

    public function beforeAction($action)
    {

        // To bypass from FB bot
        $this->enableCsrfValidation = false;

        // To get original post data from FB bot
        //$this->post_orig_data = Yii::$app->request->getRawBody();

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionIndex()
    {
        return $this->render('index');
    }

    public function actionTest() {

        $req = Yii::$app->request->post();

        $d = json_decode(Yii::$app->request->getRawBody(), true);

        //$res = $d['result']['metadata']['intentId'] . serialize($req) . "\n";
        $res = serialize($d) . serialize($req) . "\n";

##        $fp = fopen('/var/www/btc_bot/web/test.log', 'a');
##        fwrite($fp, $res);

        //echo 'bot is there';

        $msg = "BTC/USD rate for now: xxx USD";

        $response = array(
            "source" => "btc_bot",
            "speech" => $msg,
            "displayText" => $msg,
            "contextOut" => array()
        );

        echo json_encode($response);

    }
    public function actionListen() {

        //http://mansioner.club/btc-bot-webhook/listen

        $this->actionLogCallback(substr(serialize(Yii::$app->request->post()), 0, 510));

        $d = json_decode(Yii::$app->request->getRawBody(), true);

        if ($d['result']['metadata']['intentId'] == 'd97d454e-5e45-4e5f-ade1-88e67c9d79d4') {

            // if current BTC/USD rate
            // intentId d97d454e-5e45-4e5f-ade1-88e67c9d79d4

            $data = $this->getBtcToUsdRate();

            $msg = "BTC/USD rate for now: " . $data . " USD";
/*
            $response = array(
                "source" => "MyScript",
                "speech" => $msg,
                "data" => array(
                    "facebook" => array(
                        "text" => "some text333",
                        "quick_replies" => array(
                            array(
                              "content_type" => "text",
                            "title" => "Search",
                            "payload" => "<POSTBACK_PAYLOAD>",
                            "image_url" => "http://example.com/img/red.png"
                            ),
                          array(
                              "content_type" => "location"
                          ),
                          array(
                              "content_type" => "text",
                            "title" => "Something Else",
                            "payload" => "<POSTBACK_PAYLOAD>"
                          )
                        )
                    )
                ),

                "displayText" => $msg . '__',
                "contextOut" => array()
            );
*/
/*
            $response = array(
                "source" => "MyScript",
                "speech"=> "",
                "messages"=> [array(
                    "title"=> 'Oblivion',
                    "subtitle"=> 'Oblivion is a SciFi film.',
                    "buttons"=> [ array(
                        "text"=> "view film",
                        "postback"=>"https://www.moovrika.com/m/3520"
                    ),
                        array(
                            "text"=> "Ask something else",
                            "postback"=>"I want to ask something else"
                        )
                    ]
                ,
                    "type"=> 1
                )],

                "displayText" => $msg . '__',
                "contextOut" => array()
            );
*/
/*
            $response = array(
                "source" => "MyScript",
                "speech"=> "",
                "messages"=> [array(
                    "title"=> 'Oblivion',
                    "subtitle"=> 'Oblivion is a SciFi film.',
                    "imageUrl" => "https://lh3.googleusercontent.com/UMB2HRRRAAzXAEaCM9Gg-baCaDx_1RTXHscW5k2Ge3P4KP4mwTt2m6oyEHBWex3c4SxU=w300",
                    "buttons"=> [ array(
                        "text"=> "view film",
                        "postback"=>"https://www.moovrika.com/m/3520",
                    ),
                        array(
                            "text"=> "Ask something else",
                            "postback"=>"I want to ask something else"
                        )
                    ]
                ,
                    "type"=> 1
                ),
                    array(
                        "title"=> 'Oblivion',
                        "subtitle"=> 'Oblivion is a SciFi film.',
                        "imageUrl" => "https://lh3.googleusercontent.com/UMB2HRRRAAzXAEaCM9Gg-baCaDx_1RTXHscW5k2Ge3P4KP4mwTt2m6oyEHBWex3c4SxU=w300",
                        "buttons"=> [ array(
                            "text"=> "view film",
                            "postback"=>"https://www.moovrika.com/m/3520",
                        ),
                            array(
                                "text"=> "Ask something else",
                                "postback"=>"I want to ask something else"
                            )
                        ]
                    ,
                        "type"=> 1
                    )
                    ],

                "displayText" => $msg . '__',
                "contextOut" => array()
            );
*/


        



        } else {

            // if BTC/USD percent change for last 1 h

            $data = $this->getBtcToUsdPercentRateLast1h();

            $msg = "BTC/USD percent change for 1h: ".$data . "%";

            $response = array(
                "source" => "MyScript",
                "speech" => $msg,
                "displayText" => $msg,
                "contextOut" => array()
            );

        }
        echo json_encode($response);

    }
    public function getBtcToUsdRate() {

        //https://blockchain.info/ru/ticker
return 'ERROR';
        $client = new Client;
        $res = $client->request('GET', 'https://blockchain.info/ru/ticker');
        $data = json_decode($res->getBody());

        return $data->USD->buy;

    }
    public function getBtcToUsdPercentRateLast1h() {

        //https://api.coinmarketcap.com/v1/ticker/bitcoin/?convert=USD
return 'ERROR';
        $client = new Client;
        $res = $client->request('GET', 'https://api.coinmarketcap.com/v1/ticker/bitcoin/?convert=USD');
        $data = json_decode($res->getBody());

        return $data[0]->percent_change_1h;

    }
    public function actionLogCallback($msg = 'hello world') {

        $sql = "INSERT INTO 
                bitcoin_bot_1 
                (msg)
                VALUES
                (' ".$msg." ')";

        Yii::$app->db->createCommand($sql)->execute();

    }
}
