<?php

namespace app\controllers;

use app\commands\MarketDataController;
use app\models\MarketData;
use yii\filters\AccessControl;
use yii\httpclient\Client;
use yii\web\Controller;

class ExchangeController extends Controller
{
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                //'only' => ['logout'],
                'rules' => [
                    [
                        'allow' => true,
                        //'actions' => ['login', 'signup'],
                        //'roles' => ['?'],
                    ],
                    [
                        'allow' => true,
                        //'actions' => ['login','signup','logout','about','index','contact' ],
                        //'roles' => ['?'],
                    ],
                ],

            ],
        ];
    }

    public function beforeAction($action)
    {

        // To bypass from FB bot
        $this->enableCsrfValidation = false;

        // To get original post data from FB bot
        //$this->post_orig_data = Yii::$app->request->getRawBody();

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionIndex()
    {
        echo "Hi, I'm BTC bot";
    }
    public static function getMarketPrice($exchange_id = 'blockchain.info', $market_id = 'BTC_USD') {

        if ($market_id == 'BTC_USD') {

            $client = new Client();
            $response = $client->createRequest()
                ->setMethod('GET')
                ->setUrl('https://blockchain.info/en/ticker')
                ->send();
            if ($response->isOk) {

                return round($response->data['USD']['buy'], 2);

            }

        }

        //---

        if ($market_id == 'ETH_USD') {

            // ETH USD
            $client = new Client();
            $response = $client->createRequest()
                ->setMethod('GET')
                ->setUrl('https://api.coinmarketcap.com/v1/ticker/ethereum/')
                ->send();
            if ($response->isOk) {

                return round($response->data[0]['price_usd'], 2);

            }

        }

    }

    public static function getAddressStatus($address, $exchange_id = 'blockchain.info', $market_id = 'BTC_USD') {

        if ($market_id == 'BTC_USD') {

            // ETH USD
            $client = new Client();
            $response = $client->createRequest()
                ->setMethod('GET')
                ->setUrl('https://blockchain.info/ru/rawaddr/'.$address.'?limit=0')
                ->send();
            if ($response->isOk) {

                $msg    = 'Account address: ' . $response->data['address'] . "\n";
                $msg   .= 'Number of transactions: ' . $response->data['n_tx'] . "\n";
                $msg   .= 'Total received: ' . ($response->data['total_received']/100000000) . " BTC\n";
                $msg   .= 'Total sent: ' . ($response->data['total_sent']/100000000) . " BTC\n";
                $msg   .= 'Current balance: ' . ($response->data['final_balance']/100000000) . " BTC\n";

                return $msg;

            }

        }

    }

}
