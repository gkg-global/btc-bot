<?php

namespace app\controllers;

use app\models\BotMessage;
use app\models\BotToUserMessage;
use app\models\UserProfile;
use yii\filters\AccessControl;
use yii\web\Controller;

class BotCoreController extends Controller
{
    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                //'only' => ['logout'],
                'rules' => [
                    [
                        'allow' => true,
                        //'actions' => ['login', 'signup'],
                        //'roles' => ['?'],
                    ],
                    [
                        'allow' => true,
                        //'actions' => ['login','signup','logout','about','index','contact' ],
                        //'roles' => ['?'],
                    ],
                ],

            ],
        ];
    }

    public function beforeAction($action)
    {
        // To bypass from FB bot
        $this->enableCsrfValidation = false;

        // To get original post data from FB bot
        //$this->post_orig_data = Yii::$app->request->getRawBody();
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionIndex()
    {
        echo "Hi, I'm BTC bot";
    }
    public static function processMessage($msg = false) {

        // ==============
        // How it works:
        // receive message to process
        // save origin message from client controller
        // send to Dialogflow processing Controller
        // receive action / intent ID
        // based on intent ID BotCore doing it's stuff via external controllers
        // send reply back to user via client controller
        // ==============

        //Save original message
        $msg->saveMessage();

        //NLP msg processing
        $intent = NlpController::processNLP($msg->message);

        // RESULT
        // $intent->result->fulfillment->speech;
        // $intent->result->action

        //UPD message
        $msg->intent_id = $intent->result->action;
        $msg->locale = $intent->lang;
        $msg->updateMessageNlpData();


        $reply = self::processIntent($intent);

        // save reply message
        $botToUserMsg = new BotToUserMessage();
        $botToUserMsg->recipient_id = $msg->sender_id;
        $botToUserMsg->message = $reply['msg'];
        $botToUserMsg->message_type = 'reply';
        $botToUserMsg->saveMessage();

        return $reply;

    }
    public static function createSignal($msg) {

        foreach (self::getSignalSubscribers() as $user_id) {

            FbController::sendMessage($user_id, $msg);

        }

    }
    public static function getSignalSubscribers() {

        return [1418976508165446];

        //$users = UserProfile::getUsersExternalId();
        //return $users;

    }
    public static function processIntent($intent) {

        if ($intent->result->action == 'btc_rate') {
            // BTC market rate
            return ['type' => 'text', 'msg' => 'BTC to USD rate now: ' . ExchangeController::getMarketPrice() . ' USD'];

        } else if ($intent->result->action == 'eth_rate') {
            // BTC market rate
            return ['type' => 'text', 'msg' => 'ETH to USD rate now: ' . ExchangeController::getMarketPrice('coinmarketcap.com', 'ETH_USD') . ' USD'];

        } else if ($intent->result->action == 'account.status' && $intent->result->contexts[0]->name == 'status') {

            return ['type' => 'text', 'msg' => ExchangeController::getAddressStatus($intent->result->parameters->any)];
            //return ['type' => 'text', 'msg' => serialize($intent->result->parameters->any)];

        } else {
            // Default intent
            return ['type' => 'text', 'msg' => $intent->result->fulfillment->speech];

        }

    }


}
